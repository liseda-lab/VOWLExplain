0: entry.js

1: /css/vowl.css

5: elements/nodes/nodeMap (nodePrototypeMap)
webpack requiring different modules (ExternalClass, OwlClass, OwlComplementOf, OwlDeprecatedClass, OwlDisjointUnionOf, 
									OwlEquivalentClass, OwlIntersectionOf, OwlNothing, OwlThing, OwlUnionOf, RdfsClass,
									RdfsDatatype, RdfsLiteral, RdfsResource)

6: d3 export

7: External Class

8: Round Node
inclui:
função actualRadius - para mudar o raio consoante o numero de individuos
função draw
função redrawElement

9: Base Node
Deve servir como base ao node de individuo

10: Base Element 
Deve servir como base ao node de individuo

13: Force layout node functions

14: /util/CenteringTextElement

16: AbstractTextElement

17: Draw tools
inclui:
função appendCircularClass
função appendRectangularClass
(função appendOvalClass) ? Devolve fundo vazio, como a rectangular class em vez de circulo como circular class. porquê?
função drawPin
função drawRectHalo
função drawHalo
função 

18: OwlClass

19: OwlComplementOf

20: setOperatorNode (uses module 8, but what does it do? added ovalnode reference, not sure if right)

26: OwlDeprecatedClass

27: OwlDisjointUnionOf

28: OwlEquivalentClass

29: OwlIntersectionOf

30: OwlNothing

31: OwlThing

32: OwlUnionOf

33: RdfsClass

34: RdfsDatatype

38: RdfsLiteral

39: RdfsResource

40: propertyPrototypeMap

43: math

46: elements/properties/implementations/OwlDisjointWith

57: graph.js
onde função parser está a ser usada, fornecendo o argumento "graph"
muitoo grande, tem muita coisa, deve ser onde se define as formas
tem subtitulos para ajudar a explorar
(rendertype= round definido no modulo base node)

58: lodash/core

60: linkCreator

63: elementTools

64: options.js
onde são definidas várias propriedades, como supported datatypes, supported classes, etc

65: parser.js

	/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(d3) {var OwlDisjointWith = __webpack_require__(46);
	var attributeParser = __webpack_require__(66)();
	var equivalentPropertyMerger = __webpack_require__(67)();
	var nodePrototypeMap = __webpack_require__(5)();
	var propertyPrototypeMap = __webpack_require__(40)();

	...

	   * Parses the ontology data and preprocesses it (e.g. connecting inverse properties and so on).
	   * @param ontologyData the loaded ontology json file
	   */
	  parser.parse = function ( ontologyData ){
		  utiliza:
			
			função combine classes (class e class attribute + datatype e datatype attribute) adicionar tratamento de individuos
					utiliza:
						prototypeMap = função createLowerCasePrototypeMap(nodePrototypeMap)
						função addAdditionalAttributes
						Prototype = prototypeMap.get(element.type.toLowerCase())
						node = new Prototype(graph); //This will execute the respective prototype function, depending on the node

			// Inject properties for unions, intersections, ...
				função addSetOperatorProperties
				função combine properties (property e property attribute)
				classMap/ propertyMap = função mapElements (para combined classes and data types, e para properties )
											vai buscar o id de cada objeto e cria um dicionario ID: objeto.
											não funciona bem para os objetos dos individuos... queremos que faça 
											ID da classe: individuo?
				função mergeRangesOfEquivalentProperties
			// Process the graph data
				função convertTypesToIris
							Tries to convert the type to an iri and sets it (não parece ter muita influencia)
				nodes = função createNodeStructure //includes individuals
				properties = createPropertyStructure

			função combineProperties (properties + properties attribute)
	  }
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(6)))

66: parsing/attributeParser

67: parsing/equivalentPropertyMerger

73: modules/colorExternalsSwitch

317: modules/statistics.js
inclui: 
função storeTotalCounts
função storeClassAndDatatypeCount (mudada para nao contar com nodes dos individuos)
função storePropertyCount
função storeOccurencesOfTypes
função storeTotalIndividualCount

318: subClassFilter

319: Individual (semelhante a 7)

320: OvalNode (semelhante a 8)
inclui:
draw function that draws a circular node
	utiliza:
	drawTools.appendCircularClass
