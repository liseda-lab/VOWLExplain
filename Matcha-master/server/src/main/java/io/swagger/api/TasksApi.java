/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.26).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.model.AlignmentPlan;
import org.springframework.core.io.Resource;
import io.swagger.model.Task;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.bind.annotation.CookieValue;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2021-06-21T17:56:07.345478100+01:00[Europe/London]")
@Validated
public interface TasksApi {

    @Operation(summary = "Deletes an alignment task", description = "Deletion can halt a running task and delete the alignment associated with it (if it is a completed task)", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "204", description = "Successfully deleted") })
    @RequestMapping(value = "/tasks/{id}",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> deleteTaskByID(@Parameter(in = ParameterIn.PATH, description = "Task ID", required=true, schema=@Schema()) @PathVariable("id") String id);


    @Operation(summary = "Downloads the alignment file", description = "This resource is only available if the associated task is `completed`. The alignment must comply with the [EDOAL](http://alignapi.gforge.inria.fr/edoal.html) format. ", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "The alignment produced by a completed task in the format of the Alignment API", content = @Content(mediaType = "application/rdf+xml", schema = @Schema(implementation = Resource.class))) })
    @RequestMapping(value = "/tasks/{id}/alignment",
        produces = { "application/rdf+xml" }, 
        method = RequestMethod.GET)
    ResponseEntity<Resource> downloadAlignment(@Parameter(in = ParameterIn.PATH, description = "Task ID", required=true, schema=@Schema()) @PathVariable("id") String id);


    @Operation(summary = "Returns an alignment task", description = "", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "An alignment task", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Task.class))) })
    @RequestMapping(value = "/tasks/{id}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<Task> getTaskByID(@Parameter(in = ParameterIn.PATH, description = "Task ID", required=true, schema=@Schema()) @PathVariable("id") String id);


    @Operation(summary = "Returns the alignment tasks submitted to the service", description = "The collection includes alignment tasks in different stages of their lifecycle ", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "The tasks submitted to the service", content = @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Task.class)))) })
    @RequestMapping(value = "/tasks",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<Task>> getTasks();


    @Operation(summary = "Submit an alignment task", description = "The main component of the submission is a `scenarioDefinition` compliant to MAPLE (Mapping Architecture based on Linguistic Evidences), which summarizes the characteristics of the given matching scenario, while also hinting at possible alignment strategies and potentially useful support resources (e.g. wordnets for synonym expansion). Additionally, the submission may include a system-level `settings`, the selection of a `matcher` and its `settings`.  ", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "201", description = "The task just submitted", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Task.class))) })
    @RequestMapping(value = "/tasks",
        produces = { "application/json" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<Task> submitTask(@Parameter(in = ParameterIn.DEFAULT, description = "", schema=@Schema()) @Valid @RequestBody AlignmentPlan body);

}

