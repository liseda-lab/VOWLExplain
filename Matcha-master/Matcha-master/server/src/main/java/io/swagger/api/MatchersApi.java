/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.26).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.model.Matcher;
import io.swagger.model.ScenarioDefinition;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.bind.annotation.CookieValue;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2021-06-21T17:56:07.345478100+01:00[Europe/London]")
@Validated
public interface MatchersApi {

    @Operation(summary = "Returns a matcher", description = "", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "A matcher", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Matcher.class))) })
    @RequestMapping(value = "/matchers/{id}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<Matcher> getMatcherByID(@Parameter(in = ParameterIn.PATH, description = "Matcher ID", required=true, schema=@Schema()) @PathVariable("id") String id);


    @Operation(summary = "Returns the available matchers", description = "", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "The available matchers", content = @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Matcher.class)))),
        
        @ApiResponse(responseCode = "501", description = "The alignment service doesn't support the listing of matchers") })
    @RequestMapping(value = "/matchers",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<Matcher>> getMatchers();


    @Operation(summary = "Find matchers that are suitable for the provided `scenarioDefinition`", description = "", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Suitable matchers", content = @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Matcher.class)))),
        
        @ApiResponse(responseCode = "501", description = "The alignment service doesn't support the searching matchers") })
    @RequestMapping(value = "/matchers/search",
        produces = { "application/json" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<List<Matcher>> searchMatchers(@Parameter(in = ParameterIn.DEFAULT, description = "", schema=@Schema()) @Valid @RequestBody ScenarioDefinition body);

}

